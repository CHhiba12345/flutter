// Mocks generated by Mockito 5.4.5 from annotations
// in eye_volve/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:eye_volve/features/auth/domain/entities/app_user.dart' as _i2;
import 'package:eye_volve/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:eye_volve/features/auth/domain/usecases/forgot_password_use_case.dart'
    as _i14;
import 'package:eye_volve/features/auth/domain/usecases/reset_password_use_case.dart'
    as _i15;
import 'package:eye_volve/features/auth/domain/usecases/sign_in_with_email_and_password.dart'
    as _i9;
import 'package:eye_volve/features/auth/domain/usecases/sign_in_with_facebook.dart'
    as _i12;
import 'package:eye_volve/features/auth/domain/usecases/sign_in_with_google.dart'
    as _i11;
import 'package:eye_volve/features/auth/domain/usecases/sign_out.dart' as _i13;
import 'package:eye_volve/features/auth/domain/usecases/sign_up_with_email_and_password.dart'
    as _i10;
import 'package:eye_volve/features/favorites/domain/repositories/favorite_repository.dart'
    as _i7;
import 'package:eye_volve/features/favorites/domain/usecases/toggle_favorite_usecase.dart'
    as _i20;
import 'package:eye_volve/features/history/domain/entities/history.dart'
    as _i18;
import 'package:eye_volve/features/history/domain/repositories/history_repository.dart'
    as _i6;
import 'package:eye_volve/features/history/domain/usecases/delete_history_usecase.dart'
    as _i19;
import 'package:eye_volve/features/history/domain/usecases/record_history.dart'
    as _i17;
import 'package:eye_volve/features/home/domain/entities/product.dart' as _i5;
import 'package:eye_volve/features/home/domain/repositories/home_repository.dart'
    as _i4;
import 'package:eye_volve/features/home/domain/usecases/scan_product.dart'
    as _i16;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppUser_0 extends _i1.SmartFake implements _i2.AppUser {
  _FakeAppUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_1 extends _i1.SmartFake
    implements _i3.AuthRepository {
  _FakeAuthRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeRepository_2 extends _i1.SmartFake
    implements _i4.HomeRepository {
  _FakeHomeRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProduct_3 extends _i1.SmartFake implements _i5.Product {
  _FakeProduct_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHistoryRepository_4 extends _i1.SmartFake
    implements _i6.HistoryRepository {
  _FakeHistoryRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFavoriteRepository_5 extends _i1.SmartFake
    implements _i7.FavoriteRepository {
  _FakeFavoriteRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.AppUser> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.AppUser>);

  @override
  _i8.Future<_i2.AppUser> signUpWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #signUpWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.AppUser>);

  @override
  _i8.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i2.AppUser?> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i8.Future<_i2.AppUser?>.value(),
      ) as _i8.Future<_i2.AppUser?>);

  @override
  _i8.Future<_i2.AppUser?> signInWithFacebook() => (super.noSuchMethod(
        Invocation.method(
          #signInWithFacebook,
          [],
        ),
        returnValue: _i8.Future<_i2.AppUser?>.value(),
      ) as _i8.Future<_i2.AppUser?>);

  @override
  _i8.Future<String?> getFirebaseToken() => (super.noSuchMethod(
        Invocation.method(
          #getFirebaseToken,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> sendPasswordResetEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [email],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> confirmPasswordReset(
    String? oobCode,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmPasswordReset,
          [
            oobCode,
            newPassword,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);
}

/// A class which mocks [SignInWithEmailAndPassword].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithEmailAndPassword extends _i1.Mock
    implements _i9.SignInWithEmailAndPassword {
  MockSignInWithEmailAndPassword() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i8.Future<_i2.AppUser> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.AppUser>);
}

/// A class which mocks [SignUpWithEmailAndPassword].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpWithEmailAndPassword extends _i1.Mock
    implements _i10.SignUpWithEmailAndPassword {
  MockSignUpWithEmailAndPassword() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i8.Future<_i2.AppUser> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.AppUser>.value(_FakeAppUser_0(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.AppUser>);
}

/// A class which mocks [SignInWithGoogle].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithGoogle extends _i1.Mock implements _i11.SignInWithGoogle {
  MockSignInWithGoogle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i8.Future<_i2.AppUser?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<_i2.AppUser?>.value(),
      ) as _i8.Future<_i2.AppUser?>);
}

/// A class which mocks [SignInWithFacebook].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithFacebook extends _i1.Mock
    implements _i12.SignInWithFacebook {
  MockSignInWithFacebook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i8.Future<_i2.AppUser?> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<_i2.AppUser?>.value(),
      ) as _i8.Future<_i2.AppUser?>);
}

/// A class which mocks [SignOut].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignOut extends _i1.Mock implements _i13.SignOut {
  MockSignOut() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i8.Future<void> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ForgotPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgotPasswordUseCase extends _i1.Mock
    implements _i14.ForgotPasswordUseCase {
  MockForgotPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i8.Future<void> execute(String? email) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [email],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ResetPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetPasswordUseCase extends _i1.Mock
    implements _i15.ResetPasswordUseCase {
  MockResetPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i8.Future<void> execute(
    String? oobCode,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            oobCode,
            newPassword,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ScanProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockScanProduct extends _i1.Mock implements _i16.ScanProduct {
  MockScanProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HomeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHomeRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.HomeRepository);

  @override
  _i8.Future<_i5.Product> execute(String? barcode) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [barcode],
        ),
        returnValue: _i8.Future<_i5.Product>.value(_FakeProduct_3(
          this,
          Invocation.method(
            #execute,
            [barcode],
          ),
        )),
      ) as _i8.Future<_i5.Product>);

  @override
  _i8.Future<List<_i5.Product>> search(String? query) => (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue: _i8.Future<List<_i5.Product>>.value(<_i5.Product>[]),
      ) as _i8.Future<List<_i5.Product>>);
}

/// A class which mocks [RecordHistory].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordHistory extends _i1.Mock implements _i17.RecordHistory {
  MockRecordHistory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.HistoryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHistoryRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.HistoryRepository);

  @override
  _i8.Future<void> recordScan({required String? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordScan,
          [],
          {#productId: productId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> recordView({required String? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordView,
          [],
          {#productId: productId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i6.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i18.History>> getUserHistory(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserHistory,
          [uid],
        ),
        returnValue: _i8.Future<List<_i18.History>>.value(<_i18.History>[]),
      ) as _i8.Future<List<_i18.History>>);

  @override
  _i8.Future<void> recordScan({
    required String? uid,
    required String? productId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordScan,
          [],
          {
            #uid: uid,
            #productId: productId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> recordView({
    required String? uid,
    required String? productId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordView,
          [],
          {
            #uid: uid,
            #productId: productId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> deleteHistory(String? historyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteHistory,
          [historyId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [DeleteHistoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteHistoryUseCase extends _i1.Mock
    implements _i19.DeleteHistoryUseCase {
  MockDeleteHistoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.HistoryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHistoryRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i6.HistoryRepository);

  @override
  _i8.Future<void> execute(String? historyId) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [historyId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [FavoriteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteRepository extends _i1.Mock
    implements _i7.FavoriteRepository {
  MockFavoriteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> toggleFavorite({
    required String? uid,
    required String? productId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [],
          {
            #uid: uid,
            #productId: productId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i5.Product>> getFavorites(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [uid],
        ),
        returnValue: _i8.Future<List<_i5.Product>>.value(<_i5.Product>[]),
      ) as _i8.Future<List<_i5.Product>>);
}

/// A class which mocks [ToggleFavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleFavoriteUseCase extends _i1.Mock
    implements _i20.ToggleFavoriteUseCase {
  MockToggleFavoriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FavoriteRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFavoriteRepository_5(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i7.FavoriteRepository);

  @override
  _i8.Future<void> execute({
    required String? uid,
    required String? productId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #uid: uid,
            #productId: productId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i5.Product>> getFavorites(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [uid],
        ),
        returnValue: _i8.Future<List<_i5.Product>>.value(<_i5.Product>[]),
      ) as _i8.Future<List<_i5.Product>>);
}
